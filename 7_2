include "framework.h"
#include "WindowsProject1.h"

#define _USE_MATH_DEFINES
#include <cmath>

#define MAX_LOADSTRING 100

// Глобальные переменные:
HINSTANCE hInst;                                // текущий экземпляр
WCHAR szTitle[MAX_LOADSTRING];                  // Текст строки заголовка
WCHAR szWindowClass[MAX_LOADSTRING];            // имя класса главного окна

// Отправить объявления функций, включенных в этот модуль кода:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: Разместите код здесь.

    // Инициализация глобальных строк
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_WINDOWSPROJECT1, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // Выполнить инициализацию приложения:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WINDOWSPROJECT1));

    MSG msg;

    // Цикл основного сообщения:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  ФУНКЦИЯ: MyRegisterClass()
//
//  ЦЕЛЬ: Регистрирует класс окна.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WINDOWSPROJECT1));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_WINDOWSPROJECT1);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   ФУНКЦИЯ: InitInstance(HINSTANCE, int)
//
//   ЦЕЛЬ: Сохраняет маркер экземпляра и создает главное окно
//
//   КОММЕНТАРИИ:
//
//        В этой функции маркер экземпляра сохраняется в глобальной переменной, а также
//        создается и выводится главное окно программы.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // Сохранить маркер экземпляра в глобальной переменной

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}
//***************************************************************************************

class Figure
{
protected:
    int x, y;
    int R;
    int Ang;
    int VAng;
    int V;
    int Napr;
    COLORREF col;
    HWND hwnd;
    int N_Reg;
public:
    Figure(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd);
    virtual void step();
    virtual void draw(int Reg) = 0;
};

Figure::Figure(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd)
{
    this->R = R;
    this->VAng = VAng;
    this->V = V;
    this->Napr = Napr;
    this->col = col;
    this->hwnd = hwnd;
    Ang = 0;
    N_Reg = 1;
    RECT rect;
    GetClientRect(hwnd, &rect);
    x = rect.right / 2;
    y = rect.bottom / 2;
}

void Figure::step()
{
    Ang += VAng;
    if (Ang >= 360) Ang -= 360;
    RECT rect;
    GetClientRect(hwnd, &rect);

    if (Napr == 1)
    {
        x += V * N_Reg;
        if (N_Reg == 1)
        {
            if (x + R >= rect.right)
                N_Reg = -1;
        }
        else
        {
            if (x - R <= 0)
                N_Reg = 1;
        }
    }
    else
    {
        y += V * N_Reg;
        if (N_Reg == 1)
        {
            if (y + R >= rect.bottom)
                N_Reg = -1;
        }
        else
        {
            if (y - R <= 0)
                N_Reg = 1;
        }
    }
}

class MyRhombus : public Figure {
protected:
    int D1; // Диагональ 1
    int D2; // Диагональ 2
    POINT* p; // Массив координат вершин
public:
    // Конструктор
    MyRhombus(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd, int D1, int D2);
    void step(); // Метод дополнительно считает новые координаты вершин
    void draw(int Reg); // Метод рисования фигуры
};

// Определение конструктора
MyRhombus::MyRhombus(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd, int D1, int D2) :
    // Вызов конструктора базового класса
    Figure(R, VAng, V, Napr, col, hwnd) {
    this->D1 = D1;
    this->D2 = D2;
    p = new POINT[4]; // Создание массива координат вершин
    // Расчет координат вершин ромба
    double A = Ang * M_PI / 180; // Угол в градусах следует перевести в радианы
    p[0].x = x + D1 / 2 * cos(A);
    p[0].y = y - D2 / 2 * sin(A);
    A += M_PI / 2;
    p[1].x = x + D1 / 2 * cos(A);
    p[1].y = y - D2 / 2 * sin(A);
    A += M_PI / 2;
    p[2].x = x + D1 / 2 * cos(A);
    p[2].y = y - D2 / 2 * sin(A);
    A += M_PI / 2;
    p[3].x = x + D1 / 2 * cos(A);
    p[3].y = y - D2 / 2 * sin(A);
}

void MyRhombus::step() {
    Figure::step(); // Вызов метода базового класса
    // Расчет координат вершин ромба
    double A = Ang * M_PI / 180; // Угол в градусах следует перевести в радианы
    p[0].x = x + D1 / 2 * cos(A);
    p[0].y = y - D2 / 2 * sin(A);
    A += M_PI / 2;
    p[1].x = x + D1 / 2 * cos(A);
    p[1].y = y - D2 / 2 * sin(A);
    A += M_PI / 2;
    p[2].x = x + D1 / 2 * cos(A);
    p[2].y = y - D2 / 2 * sin(A);
    A += M_PI / 2;
    p[3].x = x + D1 / 2 * cos(A);
    p[3].y = y - D2 / 2 * sin(A);
}

void MyRhombus::draw(int Reg) {
    HPEN pen;
    if (Reg == 1) // Режим рисования фигуры
        pen = CreatePen(PS_SOLID, 1, col);
    else // Режим стирания (белое перо)
        pen = CreatePen(PS_SOLID, 1, RGB(255, 255, 255));
    HDC hdc; // Получение контекста устройства
    hdc = GetDC(hwnd);
    SelectObject(hdc, pen); // Загрузка пера в контекст устройства
    MoveToEx(hdc, p[0].x, p[0].y, 0); // Графический курсор в первую вершину
    for (int i = 1; i < 4; i++)
        LineTo(hdc, p[i].x, p[i].y);
    LineTo(hdc, p[0].x, p[0].y); // Соединение первой и последней вершин
    ReleaseDC(hwnd, hdc);
    DeleteObject(pen); // Удаление пера
}

class MyPolygon : public Figure
{
protected:
    int N;       //Количество вершин.
    POINT* p;    //Массив координат вершин,
public:
    // Заголовок конструктора,
    MyPolygon(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd, int N);
    void step(); /*Метод дополнительно считает новые координаты вершин */
    void draw(int Reg); //Метод рисования фигуры
};
// Определение конструктора.
MyPolygon::MyPolygon(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd, int N) :
    // Вызов конструктора базового класса.
    Figure(R, VAng, V, Napr, col, hwnd)
{
    this->N = N;
    p = new POINT[N]; // Создание массива координат вершит. / / Расчет координат вершин.
    double A = Ang * M_PI / 180; /* Угол в градусах следует перевести в радианы */
    double A1 = 2 * M_PI / N; /* Угол между направлениями на соседние вершины из центра фигуры */
    for (int i = 0; i < N; i++, A += A1)
    {
        p[i].x = x + R * cos(A);
        p[i].y = y - R * sin(A);
    }
}

void MyPolygon::step() /* Метод дополнительно считает новые координаты вершин */
{
    Figure::step(); //Вызов метода базового класса.
    // Расчет координат вершин многоугольника.
    double A = Ang * M_PI / 180; /* Угол в градусах следует перевести в радианы */
    double A1 = 2 * M_PI / N; /* Угол между направлениями на соседние вершины из центра фигуры */
    for (int i = 0; i < N; i++, A += A1)
    {
        //A += A1;
        p[i].x = x + R * cos(A);
        p[i].y = y - R * sin(A);
    }
}

void MyPolygon::draw(int Reg) // Метод рисования фигуры.
{
    HPEN pen;
    if (Reg == 1) // Режим рисованя фигуры.
        pen = CreatePen(PS_SOLID, 1, col);
    else // Режим стирания (белое перо).
    {
        pen = CreatePen(PS_SOLID, 1, RGB(255, 255, 255));
    }
    HDC hdc;
    // Получение контекста устройства,
    hdc = GetDC(hwnd);
    SelectObject(hdc, pen); /* Загрузка пера в контекст устройства */
    MoveToEx(hdc, p[0].x, p[0].y, 0); /* Графический курсор в первую вершину */
    for (int i = 1; i < N; i++)
        LineTo(hdc, p[i].x, p[i].y);
    LineTo(hdc, p[0].x, p[0].y); /* Соединение первой и последней вершин */
    ReleaseDC(hwnd, hdc);
    DeleteObject(pen); // Удаление пера.
}

class Quad : public Figure {
protected:
    int length; // Длина
    POINT* p; // Массив координат вершин
public:
    // Конструктор
    Quad(int R, int VAng, int V, int Napr, COLORREF col, HWND hwnd, int length) : Figure(R, VAng, V, Napr, col, hwnd) {
        this->length = length;
        p = new POINT[4]; // Создание массива координат вершин
        // Расчет координат вершин четырехугольника
        double A = Ang * M_PI / 180; // Угол в градусах следует перевести в радианы
        p[0].x = x - length * cos(A);
        p[0].y = y - length*3 * sin(A);
        A += M_PI / 2;
        p[1].x = x - length * cos(A);
        p[1].y = y - length*3 * sin(A);
        A += M_PI / 2;
        p[2].x = x - length * cos(A);
        p[2].y = y - length*3 * sin(A);
        A += M_PI / 2;
        p[3].x = x - length * cos(A);
        p[3].y = y - length*3 * sin(A);
    }
    void step() {
        Figure::step(); // Вызов метода базового класса
        // Расчет координат вершин четырехугольника
        double A = Ang * M_PI / 180; // Угол в градусах следует перевести в радианы
        p[0].x = x - length * cos(A);
        p[0].y = y - length *3* sin(A);
        A += M_PI / 2;
        p[1].x = x - length * cos(A);
        p[1].y = y - length *3* sin(A);
        A += M_PI / 2;
        p[2].x = x - length * cos(A);
        p[2].y = y - length*3 * sin(A);
        A += M_PI / 2;
        p[3].x = x - length * cos(A);
        p[3].y = y - length *3* sin(A);
    }
    void draw(int Reg) {
        HPEN pen;
        if (Reg == 1) // Режим рисования фигуры
            pen = CreatePen(PS_SOLID, 1, col);
        else // Режим стирания (белое перо)
            pen = CreatePen(PS_SOLID, 1, RGB(255, 255, 255));
        HDC hdc; // Получение контекста устройства
        hdc = GetDC(hwnd);
        SelectObject(hdc, pen); // Загрузка пера в контекст устройства
        MoveToEx(hdc, p[0].x, p[0].y, 0); // Графический курсор в первую вершину
        for (int i = 1; i < 4; i++)
            LineTo(hdc, p[i].x, p[i].y);
        LineTo(hdc, p[0].x, p[0].y); // Соединение первой и последней вершин
        ReleaseDC(hwnd, hdc);
        DeleteObject(pen); // Удаление пера
    }
};

struct ForThread
{
    Figure* pFig;
    HANDLE hEvent;
};

HANDLE hEvents[9];
Figure* pF[9];
ForThread Data[9];
int flag = 1;
HANDLE hEvent;

DWORD WINAPI ThreadFun(LPVOID par)
{
    ForThread * pData = (ForThread*)par;
    WaitForSingleObject(hEvent, INFINITE);
    while (WaitForSingleObject(hEvent,0) == WAIT_OBJECT_0)
    {
        pData->pFig->draw(1);
        Sleep(20);
        pData->pFig->draw(0);
        pData->pFig->step();
    }
    SetEvent(pData->hEvent);
    return 1;
}

//  ФУНКЦИЯ: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  ЦЕЛЬ: Обрабатывает сообщения в главном окне.
//
//  WM_COMMAND  - обработать меню приложения
//  WM_PAINT    - Отрисовка главного окна
//  WM_DESTROY  - отправить сообщение о выходе и вернуться
//
//

LRESULT CALLBACK WndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM IParam)
{
    int wmId, wmEvent;
    PAINTSTRUCT ps;
    HDC hdc;
    switch (message)
    {
    case WM_CREATE:
        hEvent = CreateEvent(0, true, false, L"MyEvent1");
        pF[0] = new MyRhombus(100, 1, 10, 0, RGB(255, 0, 0), hwnd, 40,80);
        pF[1] = new MyRhombus(100, 1, 10, 0, RGB(255, 0, 0), hwnd, 80,160);
        pF[2] = new MyRhombus(100, 1, 10, 0, RGB(255, 0, 0), hwnd, 160,320);
        pF[3] = new MyPolygon(150, 1, 2, 0, RGB(0,255, 0), hwnd,2);
        pF[4] = new MyPolygon(150, 1, 2, 0, RGB(0, 255, 0), hwnd,2);
        pF[5] = new MyPolygon(150, 1, 2, 0, RGB(0, 255, 0), hwnd,2);
        pF[6] = new Quad(150, 3, 4, 1, RGB(0, 0, 255), hwnd,40);
        pF[7] = new Quad(150, 3, 4, 1, RGB(0, 0, 255), hwnd,80);
        pF[8] = new Quad(150, 3, 4, 1, RGB(0, 0, 255), hwnd,160);

        for (int i = 0; i < 9; i++)
        {
            Data[i].pFig = pF[i];
            Data[i].hEvent = hEvents[i] = CreateEvent(0, false, false, 0);
            CreateThread(0, 0, ThreadFun, &Data[i], 0, 0);
        }
        break;

    case WM_COMMAND:
        wmId = LOWORD(wParam);
        wmEvent = HIWORD(wParam);

        switch (wmId)
        {
        case IDM_ABOUT:
            DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hwnd, About);
            break;
        case IDM_EXIT:
            flag = 0;
            WaitForMultipleObjects(9, hEvents, TRUE, INFINITE);
            for (int i = 0; i < 9; i++)
            {
                delete pF[i];
                CloseHandle(hEvents[i]);
            }
            PostQuitMessage(0);
            break;
        default:
            return DefWindowProc(hwnd, message, wParam, IParam);   
        }
        break;

    case WM_PAINT:
        hdc = BeginPaint(hwnd, &ps);
        EndPaint(hwnd, &ps);
        break;
    case WM_DESTROY:
        flag = 0;
        WaitForMultipleObjects(9, hEvents, TRUE, INFINITE);
        for (int i = 0; i < 9; i++)
        {
            delete pF[i];
            CloseHandle(hEvents[i]);
        }
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hwnd, message, wParam, IParam);
        
    }
    return 0;
}

INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;
        break;
    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return(INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}
